/*
 * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	repositories {
		maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
				'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE',
				'com.github.jengelman.gradle.plugins:shadow:1.2.0',
				'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8'
	}
}

plugins {
	id 'org.asciidoctor.convert' version '1.5.2'
}

description = 'Reactive IO facilities for encoding/decoding, client/server and unicast/multicast'

ext {
	gradleVersion = '2.8'
	gradleScriptDir = "${rootProject.projectDir}/gradle"

	reactorVersion = version

	// Languages
	groovyVersion = '2.4.1'

	// Logging
	slf4jVersion = '1.7.12'
	logbackVersion = '1.1.2'

	// Libraries
	nettyVersion = '4.0.33.Final'
	jacksonDatabindVersion = '2.5.1'
	protobufVersion = '2.6.1'
	kryoVersion = '3.0.3'
	snappyVersion = '1.1.1.6'
	aeronVersion = '0.2.2'
  	rxJavaVersion = '1.0.14'

	// Testing
	mockitoVersion = '1.10.19'
	spockVersion = '1.0-groovy-2.4'

	javadocLinks = [
			"http://docs.oracle.com/javase/7/docs/api/",
			"http://docs.oracle.com/javaee/6/api/",
			"http://fasterxml.github.io/jackson-databind/javadoc/2.5/",
			"http://www.reactive-streams.org/reactive-streams-tck-1.0.0-javadoc/"
	] as String[]
}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configure(subprojects) { project ->
	group = 'io.projectreactor'

	apply plugin: 'propdeps'
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply from: "${gradleScriptDir}/ide.gradle"

	[compileJava, compileTestJava]*.options*.compilerArgs = [
			"-Xlint:varargs",
			"-Xlint:cast",
			"-Xlint:classfile",
			"-Xlint:dep-ann",
			"-Xlint:divzero",
			"-Xlint:empty",
			"-Xlint:finally",
			"-Xlint:overrides",
			"-Xlint:path",
			"-Xlint:processing",
			"-Xlint:static",
			"-Xlint:try",
			"-Xlint:deprecation",
			"-Xlint:unchecked",
			"-Xlint:-serial",      // intentionally disabled
			"-Xlint:-options",     // intentionally disabled
			"-Xlint:-fallthrough", // intentionally disabled
			"-Xlint:-rawtypes"     // TODO enable and fix warnings
	]

	compileJava {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	if (JavaVersion.current().isJava8Compatible()) {
		compileTestJava.options.compilerArgs += "-parameters"
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

  	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

	configurations.all {
		exclude group: 'commons-logging', module: 'commons-logging'
	}

	project.tasks.withType(Test).all {
		systemProperty("java.awt.headless", "true")
		systemProperty("reactor.trace.cancel", "true")
		systemProperty("reactor.trace.nocapacity", "true")
		systemProperty("testGroups", project.properties.get("testGroups"))
		scanForTestClasses = false
		include '**/*Tests.*'
		include '**/*Spec.*'
		exclude '**/*Abstract*.*'
	}

	repositories {
		mavenLocal()
		maven { url 'http://repo.spring.io/libs-milestone' }
		maven { url 'http://repo.spring.io/libs-snapshot' }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		jcenter()
		mavenCentral()
	}

	// dependencies that are common across all java projects
	dependencies {
		// JSR-305 annotations
		optional "com.google.code.findbugs:jsr305:3.0.0"

		// Logging
		optional "org.slf4j:slf4j-api:$slf4jVersion"

		testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
		// Testing
		testCompile "org.codehaus.groovy:groovy:$groovyVersion",
				"org.spockframework:spock-core:$spockVersion",
				"org.hamcrest:hamcrest-library:1.3",
				"org.testng:testng:6.8.5"
	}


	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		repositories {
			maven { url 'http://repo.spring.io/libs-snapshot' }
		}

		dependencyManagement {
			springIoTestRuntime {
				imports {
					mavenBom "io.spring.platform:platform-bom:$platformVersion"
				}
			}
		}
	}
}

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

project('reactor-net') {
	description = 'Reactor TCP components'

	apply plugin: 'osgi'
	apply plugin: 'groovy'

	ext.bundleImportPackages = [
			'com.fasterxml.jackson.core;resolution:=optional',
			'com.fasterxml.jackson.databind;resolution:=optional',
			'com.fasterxml.jackson.module;resolution:=optional',
			'*'
	]

	dependencies {
		compile "io.projectreactor:reactor-core:$reactorVersion"

		//Improved Http routing
		optional("io.projectreactor:reactor-bus:$reactorVersion") {
			transitive = false
		}

		//Codec Preprocessor
		optional project(':reactor-codec')

	  	//Stream support
		optional "io.projectreactor:reactor-stream:$reactorVersion"

		//Default reactor-net impl
		optional "io.netty:netty-all:$nettyVersion"

		// Testing
		testCompile "io.projectreactor:reactor-stream:$reactorVersion"
		testCompile "io.netty:netty-all:$nettyVersion"
		testCompile "org.apache.httpcomponents:fluent-hc:4.3.6"
		testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
	  	testCompile "io.reactivex:rxjava:$rxJavaVersion"

		testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	}

	jar {
		manifest {
			instruction 'Import-Package', bundleImportPackages.join(',')
		}
	}
}

project('reactor-codec') {
	description = 'Codec families'

	dependencies {
		compile "io.projectreactor:reactor-core:$reactorVersion"

		// JSON handling
		optional "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"

		// Serialization
		optional "com.esotericsoftware:kryo:$kryoVersion",
				"com.google.protobuf:protobuf-java:$protobufVersion",
				"org.xerial.snappy:snappy-java:$snappyVersion"
	}
}

project('reactor-aeron') {
	description = 'Integration of Aeron library with reactor'

	dependencies {
		compile "io.projectreactor:reactor-core:$reactorVersion"

		compile "uk.co.real-logic:aeron-driver:$aeronVersion",
				"uk.co.real-logic:aeron-client:$aeronVersion"

		testCompile project(':reactor-net')
		testCompile "io.projectreactor:reactor-stream:$reactorVersion"
		testCompile "org.reactivestreams:reactive-streams-tck:1.0.0"
		testCompile "org.mockito:mockito-core:1.10.19"
    }
}